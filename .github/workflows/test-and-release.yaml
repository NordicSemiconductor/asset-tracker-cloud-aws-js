name: Test and Release

on:
  push:
  workflow_dispatch:
    inputs:
      skipCleanup:
        description: "Skip cleanup"
        required: false
        default: "no"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: eu-west-1
  AWS_DEFAULT_REGION: eu-west-1
  CI: 1
  FORCE_COLOR: 3

jobs:
  tests:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - name: Cache AWS CLI (Linux)
        if: runner.OS == 'Linux'
        id: cache-aws-cli-linux
        uses: actions/cache@v2
        with:
          path: aws/
          key: ${{ runner.OS }}-cache-aws-cli
      - name: Install AWS (Linux)
        if:
          runner.OS == 'Linux' && steps.cache-aws-cli-linux.outputs.cache-hit !=
          'true'
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
      - name: Cache AWS CLI (MacOS)
        if: runner.OS == 'macOS'
        id: cache-aws-cli-macos
        uses: actions/cache@v2
        with:
          path: AWSCLIV2.pkg
          key: ${{ runner.OS }}-cache-aws-cli
      - name: Install AWS (MacOS)
        if:
          runner.OS == 'macOS' && steps.cache-aws-cli-macos.outputs.cache-hit !=
          'true'
        run: |
          curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
          sudo installer -pkg AWSCLIV2.pkg -target /
      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci --no-audit
      - name: Compile source
        run: npx tsc
      - name: Run Unit Tests
        run: npm test
      - name: Generate Stack ID
        run: |
          RANDOM_STRING=`node -e "const crypto = require('crypto'); process.stdout.write(crypto.randomBytes(Math.ceil(8 * 0.5)).toString('hex').slice(0, 8));"`
          echo "STACK_NAME=nrf-asset-tracker-${{ runner.OS }}-${RANDOM_STRING}" >> $GITHUB_ENV
      - run: aws sts get-caller-identity
      - run: echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV
      - name: Set up stack for End-to-End tests
        run: |
          npx cdk -a 'node --unhandled-rejections=strict dist/cdk/cloudformation-sourcecode.js' deploy
          npx cdk bootstrap
          npx cdk -a 'node --unhandled-rejections=strict dist/cdk/cloudformation-http-api-mock.js' deploy '*' --require-approval never
          node cli configure thirdParty unwiredlabs apiKey my-secret
          node cli configure thirdParty nrfcloud teamId `uuidgen`
          openssl ecparam -name secp256k1 -genkey | node cli configure thirdParty nrfcloud cellLocationServiceKey
          openssl ecparam -name secp256k1 -genkey | node cli configure thirdParty nrfcloud agpsLocationServiceKey
          openssl ecparam -name secp256k1 -genkey | node cli configure thirdParty nrfcloud pgpsLocationServiceKey
          MOCK_HTTP_API_ENDPOINT=`aws cloudformation describe-stacks --stack-name ${STACK_NAME}-mock-http-api | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "apiURL") | .OutputValue' | sed -E 's/\/$//g'`
          node cli configure thirdParty unwiredlabs endpoint ${MOCK_HTTP_API_ENDPOINT}/eu1.unwiredlabs.com
          node cli configure thirdParty nrfcloud endpoint ${MOCK_HTTP_API_ENDPOINT}/api.nrfcloud.com
          npx cdk -a 'node --unhandled-rejections=strict dist/cdk/cloudformation-test.js' deploy '*' --require-approval never
          node cli create-ca
      - run: node --unhandled-rejections=strict dist/cdk/helper/addFakeRoute.js
      - name: Run End-to-End Tests
        run: npm run test:e2e
      - name: Get logs
        if: failure()
        run: node cli logs
      - name: Clean up End-to-End test resources
        if:
          always() && !contains(toJSON(github.event.commits.*.message),
          '[skip-cleanup]') && github.event.inputs.skipCleanup != 'yes'
        run: |
          node cli configure thirdParty unwiredlabs apiKey -X
          node cli configure thirdParty unwiredlabs endpoint -X
          node cli configure thirdParty nrfcloud teamId -X
          node cli configure thirdParty nrfcloud cellLocationServiceKey -X
          node cli configure thirdParty nrfcloud agpsLocationServiceKey -X
          node cli configure thirdParty nrfcloud pgpsLocationServiceKey -X
          node cli configure thirdParty nrfcloud endpoint -X
          node cli purge-iot-user-policy-principals
          node cli purge-cas -i `cat certificates/**/rootCA.id`
          # Purge Buckets does not remove the source-code bucket (because it will be populate again by the CDK command)
          node cli purge-buckets
          npx cdk -a 'node --unhandled-rejections=strict dist/cdk/cloudformation-test.js' destroy -f '*'
          npx cdk -a 'node --unhandled-rejections=strict dist/cdk/cloudformation-http-api-mock.js' destroy -f '*'
          # Delete sourcecode bucket
          SOURCE_CODE_BUCKET=`aws cloudformation describe-stacks --stack-name $STACK_NAME-sourcecode | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "bucketName") | .OutputValue'`
          aws s3 rb s3://$SOURCE_CODE_BUCKET --force
          # Delete the sourceode stack
          npx cdk -a 'node --unhandled-rejections=strict dist/cdk/cloudformation-sourcecode.js' destroy -f '*'
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: lambdas-${{ github.sha }}
          path: dist/**/*.zip

  release:
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/saga'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Compile source
        run: npx tsc

      - name: Semantic release
        run: npx semantic-release
